{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "2.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Specifies the name of the app."
      }
    },
    "appRegistrationClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "Client ID of the Active Directory App Registration used for authentication"
      }
    },
    "b2cTenant": {
      "type": "string",
      "minLength": 3,
      "metadata": {
        "description": "Initial domain name of the created Active Directory B2C"
      }
    },
    "b2cFlowName": {
      "type": "string",
      "minLength": 3,
      "defaultValue": "B2C_1_signup_signin",
      "metadata": {
        "description": "Name of the login flow"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "iotHubSkuName": {
      "type": "string",
      "defaultValue": "F1",
      "metadata": {
        "description": "Specifies the IotHub SKU."
      }
    },
    "capacityUnits": {
      "type": "int",
      "minValue": 1,
      "maxValue": 1,
      "defaultValue": 1,
      "metadata": {
        "description": "Specifies the number of provisioned IoT Hub units. Restricted to 1 unit for the F1 SKU. Can be set up to maximum number allowed for subscription."
      }
    },
    "SignalRpricingTier": {
      "type": "string",
      "defaultValue": "Free_F1",
      "allowedValues": ["Free_F1", "Standard_S1"],
      "metadata": {
        "description": "The pricing tier of the SignalR resource."
      }
    },
    "SignalRcapacity": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [1, 2, 5, 10, 20, 50, 100],
      "metadata": {
        "description": "The number of SignalR Unit."
      }
    }
  },
  "variables": {
    "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', concat(parameters('appName'), 'IotHub'))]",
    "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', concat(parameters('appName'), 'IotHub'), 'iothubowner')]",
    "appStorageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', parameters('appName'), 'app')]",
    "FOTAStorageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', parameters('appName'), 'fota')]",
    "avatarStorageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', parameters('appName'), 'avatars')]"
  },
  "resources": [
    {
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), 'IotHub')]",
      "location": "[parameters('location')]",
      "properties": {
        "cloudToDevice": {
          "defaultTtlAsIso8601": "PT1H",
          "maxDeliveryCount": 10,
          "feedback": {
            "ttlAsIso8601": "PT1H",
            "lockDurationAsIso8601": "PT60S",
            "maxDeliveryCount": 10
          }
        },
        "eventHubEndpoints": {
          "events": {
            "retentionTimeInDays": 1,
            "partitionCount": 2
          }
        },
        "routing": {
          "routes": [
            {
              "name": "twinChangeEventsToEventHub",
              "source": "TwinChangeEvents",
              "condition": "true",
              "endpointNames": ["events"],
              "isEnabled": true
            },
            {
              "name": "twinMessagesToEventHub",
              "source": "DeviceMessages",
              "condition": "true",
              "endpointNames": ["events"],
              "isEnabled": true
            }
          ]
        }
      },
      "sku": {
        "name": "[parameters('iotHubSkuName')]",
        "capacity": "[parameters('capacityUnits')]"
      }
    },
    {
      "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), 'IotHub', '/events/publishdeviceupdates')]",
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub'))]"
      ]
    },
    {
      "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), 'IotHub', '/events/storedeviceupdate')]",
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub'))]"
      ]
    },
    {
      "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), 'IotHub', '/events/cellgeolocation')]",
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub'))]"
      ]
    },
    {
      "type": "Microsoft.Devices/provisioningServices",
      "sku": {
        "name": "S1",
        "capacity": 1
      },
      "name": "[concat(parameters('appName'), 'ProvisioningService')]",
      "apiVersion": "2020-01-01",
      "location": "[parameters('location')]",
      "properties": {
        "iotHubs": [
          {
            "connectionString": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listkeys(variables('iotHubKeyResource'), '2017-07-01').primaryKey)]",
            "location": "[parameters('location')]",
            "name": "[concat(parameters('appName'), 'IotHub','.azure-devices.net')]"
          }
        ]
      },
      "dependsOn": ["[concat(parameters('appName'), 'IotHub')]"]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[concat(parameters('appName'), 'deviceui')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[concat(parameters('appName'), 'app')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[concat(parameters('appName'), 'avatars')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "name": "[concat(parameters('appName'), 'avatars','/default/avatars')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "properties": {
        "publicAccess": "Blob"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', concat(parameters('appName'), 'avatars'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2019-08-01",
      "name": "[concat(parameters('appName'), 'ServerFarm')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "properties": {
        "name": "[concat(parameters('appName'), 'ServerFarm')]",
        "computeMode": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2019-08-01",
      "name": "[concat(parameters('appName'), 'API')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', concat(parameters('appName'), 'ServerFarm'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', concat(parameters('appName'), 'app'))]",
        "[concat(parameters('appName'), 'IotHub')]",
        "[concat(parameters('appName'), 'SignalR')]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', concat(parameters('appName'), 'ServerFarm'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', concat(parameters('appName'), 'app'), ';AccountKey=', listKeys(variables('appStorageAccountId'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', concat(parameters('appName'), 'app'), ';AccountKey=', listKeys(variables('appStorageAccountId'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(concat(parameters('appName'), 'API'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components/', concat(parameters('appName'), 'Insights')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "node"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~10"
            },
            {
              "name": "IOT_HUB_CONNECTION_STRING",
              "value": "[concat('HostName=', reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).hostName, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey)]"
            },
            {
              "name": "AVATAR_STORAGE_ACCOUNT_NAME",
              "value": "[concat(parameters('appName'), 'avatars')]"
            },
            {
              "name": "AVATAR_STORAGE_ACCESS_KEY",
              "value": "[listKeys(variables('avatarStorageAccountId'), '2019-04-01').keys[0].value]"
            },
            {
              "name": "FOTA_STORAGE_ACCOUNT_NAME",
              "value": "[concat(parameters('appName'), 'fota')]"
            },
            {
              "name": "FOTA_STORAGE_ACCESS_KEY",
              "value": "[listKeys(variables('FOTAStorageAccountId'), '2019-04-01').keys[0].value]"
            },
            {
              "name": "IoTHubEventHubCompatibleConnectionString",
              "value": "[concat('Endpoint=', reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).eventHubEndpoints.events.endpoint, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey, ';EntityPath=', reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).eventHubEndpoints.events.path)]"
            },
            {
              "name": "IoTHubEventHubName",
              "value": "[reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).eventHubEndpoints.events.path]"
            },
            {
              "name": "SignalRConnectionString",
              "value": "[listKeys(resourceId('Microsoft.SignalRService/SignalR', concat(parameters('appName'), 'SignalR')), providers('Microsoft.SignalRService','SignalR').apiVersions[0]).primaryConnectionString]"
            },
            {
              "name": "HISTORICAL_DATA_COSMOSDB_CONNECTION_STRING",
              "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName')), providers('Microsoft.DocumentDb', 'databaseAccounts').apiVersions[0]).connectionStrings[0].connectionString]"
            }
          ],
          "use32BitWorkerProcess": false,
          "cors": {
            "allowedOrigins": ["*"],
            "supportCredentials": false
          },
          "http20Enabled": true,
          "ftpsState": "Disabled"
        },
        "httpsOnly": true
      },
      "resources": [
        {
          "apiVersion": "2019-08-01",
          "name": "web",
          "type": "config",
          "dependsOn": [
            "[concat('Microsoft.Web/Sites/', concat(parameters('appName'), 'API'))]"
          ],
          "properties": {
            "siteAuthEnabled": true,
            "siteAuthSettings": {
              "enabled": true,
              "unauthenticatedClientAction": "RedirectToLoginPage",
              "tokenStoreEnabled": true,
              "defaultProvider": "AzureActiveDirectory",
              "clientId": "[parameters('appRegistrationClientId')]",
              "issuer": "[concat('https://',parameters('b2cTenant'),'.b2clogin.com/',parameters('b2cTenant'),'.onmicrosoft.com/v2.0/.well-known/openid-configuration?p=',parameters('b2cFlowName'),'')]"
            }
          }
        }
      ]
    },
    {
      "type": "microsoft.insights/components",
      "apiVersion": "2018-05-01-preview",
      "name": "[concat(parameters('appName'), 'Insights')]",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', parameters('appName'))]": "Resource"
      },
      "properties": {
        "ApplicationId": "[parameters('appName')]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "type": "Microsoft.SignalRService/SignalR",
      "apiVersion": "2018-10-01",
      "location": "[parameters('location')]",
      "name": "[concat(parameters('appName'), 'SignalR')]",
      "properties": {
        "hostNamePrefix": "[parameters('appName')]",
        "features": [
          {
            "flag": "ServiceMode",
            "value": "Serverless"
          }
        ]
      },
      "sku": {
        "capacity": "[parameters('SignalRcapacity')]",
        "name": "[parameters('SignalRpricingTier')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[concat(parameters('appName'), 'fota')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": false
      }
    },
    {
      "name": "[concat(parameters('appName'), 'fota','/default/updates')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "properties": {
        "publicAccess": "Blob"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', concat(parameters('appName'), 'fota'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2020-03-01",
      "name": "[parameters('appName')]",
      "location": "[parameters('location')]",
      "properties": {
        "enableFreeTier": true,
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/deviceMessages')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "deviceMessages"
        },
        "options": {
          "throughput": 400
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/deviceMessages/updates')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('appName'), 'deviceMessages')]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "updates",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": ["/deviceId"],
            "kind": "Hash"
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          },
          "compositeIndexes": [
            [
              {
                "path": "/source",
                "order": "ascending"
              }
            ]
          ]
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/cellGeolocation')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "cellGeolocation"
        },
        "options": {
          "throughput": 400
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('appName'), '/cellGeolocation/deviceCellGeolocations')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('appName'), 'cellGeolocation')]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('appName'))]"
      ],
      "properties": {
        "resource": {
          "id": "deviceCellGeolocations",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": ["/cellId"],
            "kind": "Hash"
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          },
          "compositeIndexes": [
            [
              {
                "path": "/source",
                "order": "ascending"
              }
            ]
          ]
        }
      }
    }
  ],
  "outputs": {
    "IoTHubConnectionString": {
      "type": "string",
      "value": "[concat('HostName=', reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).hostName, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey)]"
    },
    "IoTHubEventHubCompatibleConnectionString": {
      "type": "string",
      "value": "[concat('Endpoint=', reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).eventHubEndpoints.events.endpoint, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey, ';EntityPath=', reference(resourceId('Microsoft.Devices/IoTHubs', concat(parameters('appName'), 'IotHub')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).eventHubEndpoints.events.path)]"
    },
    "IoTHubDPSConnectionString": {
      "type": "string",
      "value": "[concat('HostName=', reference(resourceId('Microsoft.Devices/provisioningServices', concat(parameters('appName'), 'ProvisioningService')), providers('Microsoft.Devices', 'provisioningServices').apiVersions[0]).serviceOperationsHostName, ';SharedAccessKeyName=provisioningserviceowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/provisioningServices', concat(parameters('appName'), 'ProvisioningService')), providers('Microsoft.Devices', 'provisioningServices').apiVersions[0]).value[0].primaryKey)]"
    }
  }
}
